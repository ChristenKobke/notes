name: Build Android APK (Simple & Robust)
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release
        

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # 2. Setup Node.js with caching
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      # 3. Install project dependencies (with retry)
      - name: Install dependencies
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 5
          max_attempts: 3
          command: npm ci --prefer-offline --no-audit
      
      # 4. Run tests (if available)
      - name: Run tests
        run: npm run test --if-present
        continue-on-error: true
      
      # 5. Build the Vue app
      - name: Build Vue app
        run: npm run build
      
      # 6. Verify Vue build
      - name: Verify Vue build output
        run: |
          if [ ! -d "dist" ]; then
            echo "❌ Error: dist directory not found!"
            ls -la
            exit 1
          fi
          echo "✅ Vue build verified - dist size: $(du -sh dist/)"
      
      # 7. Setup Java 21 (fixed version)
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: 'gradle'
      
      # 8. Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./android/gradlew
      
      # 9. Sync Capacitor Android
      - name: Sync Capacitor Android
        run: |
          npx cap sync android
          echo "✅ Capacitor sync completed"
      
      # 10. Verify Android setup
      - name: Verify Android project
        run: |
          if [ ! -d "android/app/src/main/assets/public" ]; then
            echo "❌ Web assets not synced to Android!"
            exit 1
          fi
          echo "✅ Android project ready"
      
      # 11. Build Android APK
      - name: Build Android APK
        run: |
          # Determine build type
          BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
          
          if [ "$BUILD_TYPE" = "release" ]; then
            echo "🔨 Building RELEASE APK..."
            ./gradlew assembleRelease --no-daemon --stacktrace
            APK_PATH="app/build/outputs/apk/release/app-release-unsigned.apk"
          else
            echo "🔨 Building DEBUG APK..."
            ./gradlew assembleDebug --no-daemon --stacktrace
            APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
          fi
          
          # Verify APK was created
          if [ ! -f "$APK_PATH" ]; then
            echo "❌ APK not found at expected path: $APK_PATH"
            echo "Searching for any APK files..."
            find app/build/outputs -name "*.apk" -type f || echo "No APK files found"
            exit 1
          fi
          
          echo "✅ APK built successfully: $APK_PATH"
          echo "APK size: $(du -h "$APK_PATH" | cut -f1)"
          
          # Export for next step
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV
        working-directory: android
      
      # 12. Upload APK artifact
      - name: Upload APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: notes-app-${{ env.BUILD_TYPE }}-${{ github.run_number }}
          path: android/${{ env.APK_PATH }}
          retention-days: 30
      
      # 13. Create build summary
      - name: Build summary
        if: success()
        run: |
          echo "## 📱 Android Build Completed!" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **APK Path**: ${{ env.APK_PATH }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name**: notes-app-${{ env.BUILD_TYPE }}-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Download**: [Build Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
      
      # 14. Comment on commit (push events only)
      - name: Add commit comment
        if: success() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## 📱 Android APK Built Successfully!
              
              **Build Details:**
              - Build Type: \`${{ env.BUILD_TYPE }}\`
              - Artifact: \`notes-app-${{ env.BUILD_TYPE }}-${{ github.run_number }}\`
              
              **📥 Download APK:**
              [Download from Actions](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              *Built from: ${{ github.sha }}*`
            });
      
      # 15. Create GitHub release (for version tags)
      - name: Create Release
        if: success() && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: android/${{ env.APK_PATH }}
          name: Release ${{ github.ref_name }}
          body: |
            ## 📱 Notes App ${{ github.ref_name }}
            
            ### Download
            - **Android APK**: Download the APK file below
            
            ### Build Info
            - Build Type: ${{ env.BUILD_TYPE }}
            - Java: 21
            - Node.js: 20
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
